<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm | X-Lab - 技术传播文明，践行同步世界</title>
    <link>https://xiaoyujinghe.github.io/category/algorithm/</link>
      <atom:link href="https://xiaoyujinghe.github.io/category/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <description>algorithm</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 X-Lab</copyright><lastBuildDate>Fri, 29 May 2020 20:46:57 +0800</lastBuildDate>
    <image>
      <url>https://xiaoyujinghe.github.io/images/logo_hu3c9c2141db48b2c8d3d59e689fd883ea_181565_300x300_fit_lanczos_2.png</url>
      <title>algorithm</title>
      <link>https://xiaoyujinghe.github.io/category/algorithm/</link>
    </image>
    
    <item>
      <title>十大经典排序算法整理汇总</title>
      <link>https://xiaoyujinghe.github.io/post/sort-algorithm/</link>
      <pubDate>Fri, 29 May 2020 20:46:57 +0800</pubDate>
      <guid>https://xiaoyujinghe.github.io/post/sort-algorithm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文并不会详细讲解每种排序算法的原理&lt;/strong&gt;，网上有很多很好的教程，大家可以自己去搜了看。&lt;/p&gt;
&lt;p&gt;最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 
&lt;a href=&#34;https://leetcode-cn.com/problems/sort-an-array/&#34; title=&#34;LeetCode 912. 排序数组&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeetCode 912. 排序数组&lt;/a&gt; 这道题。&lt;/p&gt;
&lt;h2 id=&#34;性质汇总&#34;&gt;性质汇总&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果发现表中有错误，请留言告知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;最好&lt;/th&gt;
&lt;th&gt;最坏&lt;/th&gt;
&lt;th&gt;平均&lt;/th&gt;
&lt;th&gt;空间&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;稳定性&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否基于比较&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;冒泡排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(\log n)$~$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;希尔排序&lt;/td&gt;
&lt;td&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$~$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计数排序&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基数排序&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;桶排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n+m)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;维基百科&#34;&gt;维基百科&lt;/h3&gt;
&lt;p&gt;我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bubble_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bubble_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Selection_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selection_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Insertion_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Insertion_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quicksort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;归并排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merge_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希尔排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shellsort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Counting_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counting_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radix_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;桶排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bucket_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bucket_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Heapsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heapsort&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;
&lt;p&gt;所有的排序算法接口都是相同的，也就是 &lt;code&gt;vector&amp;lt;int&amp;gt; xxxSort(vector&amp;lt;int&amp;gt;&amp;amp; nums)&lt;/code&gt; 。只需要你传入一个 &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt; 类型的数组，就能返回排序后的结果。&lt;/p&gt;
&lt;p&gt;运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; sortArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        return quickSort(nums);
    }

    // 冒泡排序（超时）
    vector&amp;lt;int&amp;gt; bubbleSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = n-2; j &amp;gt;= i; --j) {
                if (nums[j] &amp;gt; nums[j+1]) {
                    swap(nums[j], nums[j+1]);
                }
            }
        }
        return nums;
    }

    // 选择排序（超时）
    vector&amp;lt;int&amp;gt; selectSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            int idx = i;
            for (int j = i; j &amp;lt; n; ++j) {
                if (nums[j] &amp;lt; nums[idx]) {
                    idx = j;
                }
            }
            swap(nums[i], nums[idx]);
        }
        return nums;
    }

    // 插入排序（超时）
    vector&amp;lt;int&amp;gt; insertSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = i; j &amp;gt; 0 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j-1]; --j) {
                swap(nums[j], nums[j-1]);
            }
        }
        return nums;
    }

    // 快速排序（24 ms）
    void qSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return;
        int m = l;
        for (int i = l; i &amp;lt; r; ++i) {
            if (nums[i] &amp;lt; nums[r]) {
                swap(nums[m++], nums[i]);
            }
        }
        swap(nums[m], nums[r]);
        qSort(nums, l, m-1);
        qSort(nums, m+1, r);
    }

    vector&amp;lt;int&amp;gt; quickSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        qSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序（192 ms）
    vector&amp;lt;int&amp;gt; mSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return {nums[l]};
        int m = l+(r-l)/2;
        vector&amp;lt;int&amp;gt; lnums = mSort(nums, l, m);
        vector&amp;lt;int&amp;gt; rnums = mSort(nums, m+1, r);
        vector&amp;lt;int&amp;gt; res;
        int i = 0, j = 0;
        while (i &amp;lt;= m-l &amp;amp;&amp;amp; j &amp;lt;= r-m-1) {
            if (lnums[i] &amp;lt; rnums[j]) {
                res.push_back(lnums[i++]);
            } else {
                res.push_back(rnums[j++]);
            }
        }
        while (i &amp;lt;= m-l) {
            res.push_back(lnums[i++]);
        }
        while (j &amp;lt;= r-m-1) {
            res.push_back(rnums[j++]);
        }
        return res;
    }

    vector&amp;lt;int&amp;gt; mergeSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        nums = mSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序 + 非递归（80 ms）
    vector&amp;lt;int&amp;gt; mergeSortNR(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int len = 1; len &amp;lt; n; len &amp;lt;&amp;lt;= 1) {
            for (int l = 0; l &amp;lt; n-len; l += 2*len) {
                int m = l+len-1;
                int r = min(n-1, l+2*len-1);
                vector&amp;lt;int&amp;gt; res;
                int i = l, j = m+1;
                while (i &amp;lt;= m &amp;amp;&amp;amp; j &amp;lt;= r) {
                    if (nums[i] &amp;lt; nums[j]) {
                        res.push_back(nums[i++]);
                    } else {
                        res.push_back(nums[j++]);
                    }
                }
                while (i &amp;lt;= m) {
                    res.push_back(nums[i++]);
                }
                while (j &amp;lt;= r) {
                    res.push_back(nums[j++]);
                }
                for (int i = l; i &amp;lt;= r; ++i) {
                    nums[i] = res[i-l];
                }
            }
        }
        return nums;
    }

    // 希尔排序（40 ms）
    vector&amp;lt;int&amp;gt; shellSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int gap = n/2; gap &amp;gt; 0; gap /= 2) {
            for (int i = gap; i &amp;lt; n; ++i) {
                for (int j = i; j-gap &amp;gt;= 0 &amp;amp;&amp;amp; nums[j-gap] &amp;gt; nums[j]; j -= gap) {
                    swap(nums[j-gap], nums[j]);
                }
            }
        }
        return nums;
    }

    // 计数排序（32 ms）
    vector&amp;lt;int&amp;gt; countSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (!n) return {};
        int minv = *min_element(nums.begin(), nums.end());
        int maxv = *max_element(nums.begin(), nums.end());
        int m = maxv-minv+1;
        vector&amp;lt;int&amp;gt; count(m, 0);
        for (int i = 0; i &amp;lt; n; ++i) {
            count[nums[i]-minv]++;
        }
        vector&amp;lt;int&amp;gt; res;
        for (int i = 0; i &amp;lt; m; ++i) {
            for (int j = 0; j &amp;lt; count[i]; ++j) {
                res.push_back(i+minv);
            }
        }
        return res;
    }

    // 基数排序（不适用于负数）
    vector&amp;lt;int&amp;gt; radixSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int maxd = 0;
        while (maxv &amp;gt; 0) {
            maxv /= 10;
            maxd++;
        }
        vector&amp;lt;int&amp;gt; count(10, 0), rank(n, 0);
        int base = 1;
        while (maxd &amp;gt; 0) {
            count.assign(10, 0);
            for (int i = 0; i &amp;lt; n; ++i) {
                count[(nums[i]/base)%10]++;
            }
            for (int i = 1; i &amp;lt; 10; ++i) {
                count[i] += count[i-1];
            }
            for (int i = n-1; i &amp;gt;= 0; --i) {
                rank[--count[(nums[i]/base)%10]] = nums[i];
            }
            for (int i = 0; i &amp;lt; n; ++i) {
                nums[i] = rank[i];
            }
            maxd--;
            base *= 10;
        }
        return nums;
    }

    // 桶排序 (20 ms)
    vector&amp;lt;int&amp;gt; bucketSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int minv = *min_element(nums.begin(), nums.end());
        int bs = 1000;
        int m = (maxv-minv)/bs+1;
        vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; bucket(m);
        for (int i = 0; i &amp;lt; n; ++i) {
            bucket[(nums[i]-minv)/bs].push_back(nums[i]);
        }
        int idx = 0;
        for (int i = 0; i &amp;lt; m; ++i) {
            int sz = bucket[i].size();
            bucket[i] = quickSort(bucket[i]);
            for (int j = 0; j &amp;lt; sz; ++j) {
                nums[idx++] = bucket[i][j];
            }
        }
        return nums;
    }

    // 堆排序（32 ms）
    void adjust(vector&amp;lt;int&amp;gt;&amp;amp; nums, int p, int s) {
        while (2*p+1 &amp;lt; s) {
            int c1 = 2*p+1;
            int c2 = 2*p+2;
            int c = (c2&amp;lt;s &amp;amp;&amp;amp; nums[c2]&amp;gt;nums[c1]) ? c2 : c1;
            if (nums[c] &amp;gt; nums[p]) swap(nums[c], nums[p]);
            else break;
            p = c;
        }
    }

    vector&amp;lt;int&amp;gt; heapSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = n/2-1; i &amp;gt;= 0; --i) {
            adjust(nums, i, n);
        }
        for (int i = n-1; i &amp;gt; 0; --i) {
            swap(nums[0], nums[i]);
            adjust(nums, 0, i);
        }
        return nums;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
