<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts | X-Lab - 技术传播文明，践行同步世界</title>
    <link>https://rsoj.github.io/post/</link>
      <atom:link href="https://rsoj.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 X-Lab</copyright><lastBuildDate>Sun, 07 Jun 2020 16:43:13 +0800</lastBuildDate>
    <image>
      <url>https://rsoj.github.io/images/logo_hu3c9c2141db48b2c8d3d59e689fd883ea_181565_300x300_fit_lanczos_2.png</url>
      <title>Blog Posts</title>
      <link>https://rsoj.github.io/post/</link>
    </image>
    
    <item>
      <title>Writing Technical Content in Academic</title>
      <link>https://rsoj.github.io/post/writing-technical-content/</link>
      <pubDate>Sun, 07 Jun 2020 16:43:13 +0800</pubDate>
      <guid>https://rsoj.github.io/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\\\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://rsoj.github.io/post/jupyter/</link>
      <pubDate>Sun, 07 Jun 2020 16:33:21 +0800</pubDate>
      <guid>https://rsoj.github.io/post/jupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (
&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the metadata of your post, using the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>十大经典排序算法整理汇总</title>
      <link>https://rsoj.github.io/post/sort-algorithm/</link>
      <pubDate>Fri, 29 May 2020 20:46:57 +0800</pubDate>
      <guid>https://rsoj.github.io/post/sort-algorithm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文并不会详细讲解每种排序算法的原理&lt;/strong&gt;，网上有很多很好的教程，大家可以自己去搜了看。&lt;/p&gt;
&lt;p&gt;最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 
&lt;a href=&#34;https://leetcode-cn.com/problems/sort-an-array/&#34; title=&#34;LeetCode 912. 排序数组&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeetCode 912. 排序数组&lt;/a&gt; 这道题。&lt;/p&gt;
&lt;h2 id=&#34;性质汇总&#34;&gt;性质汇总&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果发现表中有错误，请留言告知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;最好&lt;/th&gt;
&lt;th&gt;最坏&lt;/th&gt;
&lt;th&gt;平均&lt;/th&gt;
&lt;th&gt;空间&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;稳定性&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否基于比较&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;冒泡排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(\log n)$~$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;希尔排序&lt;/td&gt;
&lt;td&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$~$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计数排序&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基数排序&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(nk)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;桶排序&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n+m)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(n\log n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\times$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$\checkmark$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;维基百科&#34;&gt;维基百科&lt;/h3&gt;
&lt;p&gt;我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bubble_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bubble_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Selection_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selection_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Insertion_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Insertion_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Quicksort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quicksort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;归并排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merge_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希尔排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Shellsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shellsort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Counting_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Counting_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基数排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radix_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;桶排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bucket_sort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bucket_sort&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆排序&lt;/strong&gt;  : 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Heapsort&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heapsort&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;
&lt;p&gt;所有的排序算法接口都是相同的，也就是 &lt;code&gt;vector&amp;lt;int&amp;gt; xxxSort(vector&amp;lt;int&amp;gt;&amp;amp; nums)&lt;/code&gt; 。只需要你传入一个 &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt; 类型的数组，就能返回排序后的结果。&lt;/p&gt;
&lt;p&gt;运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; sortArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        return quickSort(nums);
    }

    // 冒泡排序（超时）
    vector&amp;lt;int&amp;gt; bubbleSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = n-2; j &amp;gt;= i; --j) {
                if (nums[j] &amp;gt; nums[j+1]) {
                    swap(nums[j], nums[j+1]);
                }
            }
        }
        return nums;
    }

    // 选择排序（超时）
    vector&amp;lt;int&amp;gt; selectSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            int idx = i;
            for (int j = i; j &amp;lt; n; ++j) {
                if (nums[j] &amp;lt; nums[idx]) {
                    idx = j;
                }
            }
            swap(nums[i], nums[idx]);
        }
        return nums;
    }

    // 插入排序（超时）
    vector&amp;lt;int&amp;gt; insertSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = i; j &amp;gt; 0 &amp;amp;&amp;amp; nums[j] &amp;lt; nums[j-1]; --j) {
                swap(nums[j], nums[j-1]);
            }
        }
        return nums;
    }

    // 快速排序（24 ms）
    void qSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return;
        int m = l;
        for (int i = l; i &amp;lt; r; ++i) {
            if (nums[i] &amp;lt; nums[r]) {
                swap(nums[m++], nums[i]);
            }
        }
        swap(nums[m], nums[r]);
        qSort(nums, l, m-1);
        qSort(nums, m+1, r);
    }

    vector&amp;lt;int&amp;gt; quickSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        qSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序（192 ms）
    vector&amp;lt;int&amp;gt; mSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int l, int r) {
        if (l &amp;gt;= r) return {nums[l]};
        int m = l+(r-l)/2;
        vector&amp;lt;int&amp;gt; lnums = mSort(nums, l, m);
        vector&amp;lt;int&amp;gt; rnums = mSort(nums, m+1, r);
        vector&amp;lt;int&amp;gt; res;
        int i = 0, j = 0;
        while (i &amp;lt;= m-l &amp;amp;&amp;amp; j &amp;lt;= r-m-1) {
            if (lnums[i] &amp;lt; rnums[j]) {
                res.push_back(lnums[i++]);
            } else {
                res.push_back(rnums[j++]);
            }
        }
        while (i &amp;lt;= m-l) {
            res.push_back(lnums[i++]);
        }
        while (j &amp;lt;= r-m-1) {
            res.push_back(rnums[j++]);
        }
        return res;
    }

    vector&amp;lt;int&amp;gt; mergeSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        nums = mSort(nums, 0, n-1);
        return nums;
    }

    // 归并排序 + 非递归（80 ms）
    vector&amp;lt;int&amp;gt; mergeSortNR(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int len = 1; len &amp;lt; n; len &amp;lt;&amp;lt;= 1) {
            for (int l = 0; l &amp;lt; n-len; l += 2*len) {
                int m = l+len-1;
                int r = min(n-1, l+2*len-1);
                vector&amp;lt;int&amp;gt; res;
                int i = l, j = m+1;
                while (i &amp;lt;= m &amp;amp;&amp;amp; j &amp;lt;= r) {
                    if (nums[i] &amp;lt; nums[j]) {
                        res.push_back(nums[i++]);
                    } else {
                        res.push_back(nums[j++]);
                    }
                }
                while (i &amp;lt;= m) {
                    res.push_back(nums[i++]);
                }
                while (j &amp;lt;= r) {
                    res.push_back(nums[j++]);
                }
                for (int i = l; i &amp;lt;= r; ++i) {
                    nums[i] = res[i-l];
                }
            }
        }
        return nums;
    }

    // 希尔排序（40 ms）
    vector&amp;lt;int&amp;gt; shellSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int gap = n/2; gap &amp;gt; 0; gap /= 2) {
            for (int i = gap; i &amp;lt; n; ++i) {
                for (int j = i; j-gap &amp;gt;= 0 &amp;amp;&amp;amp; nums[j-gap] &amp;gt; nums[j]; j -= gap) {
                    swap(nums[j-gap], nums[j]);
                }
            }
        }
        return nums;
    }

    // 计数排序（32 ms）
    vector&amp;lt;int&amp;gt; countSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (!n) return {};
        int minv = *min_element(nums.begin(), nums.end());
        int maxv = *max_element(nums.begin(), nums.end());
        int m = maxv-minv+1;
        vector&amp;lt;int&amp;gt; count(m, 0);
        for (int i = 0; i &amp;lt; n; ++i) {
            count[nums[i]-minv]++;
        }
        vector&amp;lt;int&amp;gt; res;
        for (int i = 0; i &amp;lt; m; ++i) {
            for (int j = 0; j &amp;lt; count[i]; ++j) {
                res.push_back(i+minv);
            }
        }
        return res;
    }

    // 基数排序（不适用于负数）
    vector&amp;lt;int&amp;gt; radixSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int maxd = 0;
        while (maxv &amp;gt; 0) {
            maxv /= 10;
            maxd++;
        }
        vector&amp;lt;int&amp;gt; count(10, 0), rank(n, 0);
        int base = 1;
        while (maxd &amp;gt; 0) {
            count.assign(10, 0);
            for (int i = 0; i &amp;lt; n; ++i) {
                count[(nums[i]/base)%10]++;
            }
            for (int i = 1; i &amp;lt; 10; ++i) {
                count[i] += count[i-1];
            }
            for (int i = n-1; i &amp;gt;= 0; --i) {
                rank[--count[(nums[i]/base)%10]] = nums[i];
            }
            for (int i = 0; i &amp;lt; n; ++i) {
                nums[i] = rank[i];
            }
            maxd--;
            base *= 10;
        }
        return nums;
    }

    // 桶排序 (20 ms)
    vector&amp;lt;int&amp;gt; bucketSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        int maxv = *max_element(nums.begin(), nums.end());
        int minv = *min_element(nums.begin(), nums.end());
        int bs = 1000;
        int m = (maxv-minv)/bs+1;
        vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; bucket(m);
        for (int i = 0; i &amp;lt; n; ++i) {
            bucket[(nums[i]-minv)/bs].push_back(nums[i]);
        }
        int idx = 0;
        for (int i = 0; i &amp;lt; m; ++i) {
            int sz = bucket[i].size();
            bucket[i] = quickSort(bucket[i]);
            for (int j = 0; j &amp;lt; sz; ++j) {
                nums[idx++] = bucket[i][j];
            }
        }
        return nums;
    }

    // 堆排序（32 ms）
    void adjust(vector&amp;lt;int&amp;gt;&amp;amp; nums, int p, int s) {
        while (2*p+1 &amp;lt; s) {
            int c1 = 2*p+1;
            int c2 = 2*p+2;
            int c = (c2&amp;lt;s &amp;amp;&amp;amp; nums[c2]&amp;gt;nums[c1]) ? c2 : c1;
            if (nums[c] &amp;gt; nums[p]) swap(nums[c], nums[p]);
            else break;
            p = c;
        }
    }

    vector&amp;lt;int&amp;gt; heapSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        for (int i = n/2-1; i &amp;gt;= 0; --i) {
            adjust(nums, i, n);
        }
        for (int i = n-1; i &amp;gt; 0; --i) {
            swap(nums[0], nums[i]);
            adjust(nums, 0, i);
        }
        return nums;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
